package com.retailsbs.logistikapp.logistic.dto;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserPositionExample {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public UserPositionExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table lgk_user_position
     *
     * @abatorgenerated Sun Jan 15 14:05:30 CST 2017
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andId_user_positionIsNull() {
            addCriterion("id_user_position is null");
            return this;
        }

        public Criteria andId_user_positionIsNotNull() {
            addCriterion("id_user_position is not null");
            return this;
        }

        public Criteria andId_user_positionEqualTo(Long value) {
            addCriterion("id_user_position =", value, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionNotEqualTo(Long value) {
            addCriterion("id_user_position <>", value, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionGreaterThan(Long value) {
            addCriterion("id_user_position >", value, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionGreaterThanOrEqualTo(Long value) {
            addCriterion("id_user_position >=", value, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionLessThan(Long value) {
            addCriterion("id_user_position <", value, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionLessThanOrEqualTo(Long value) {
            addCriterion("id_user_position <=", value, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionIn(List<Long> values) {
            addCriterion("id_user_position in", values, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionNotIn(List<Long> values) {
            addCriterion("id_user_position not in", values, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionBetween(Long value1, Long value2) {
            addCriterion("id_user_position between", value1, value2, "id_user_position");
            return this;
        }

        public Criteria andId_user_positionNotBetween(Long value1, Long value2) {
            addCriterion("id_user_position not between", value1, value2, "id_user_position");
            return this;
        }

        public Criteria andId_userIsNull() {
            addCriterion("id_user is null");
            return this;
        }

        public Criteria andId_userIsNotNull() {
            addCriterion("id_user is not null");
            return this;
        }

        public Criteria andId_userEqualTo(Long value) {
            addCriterion("id_user =", value, "id_user");
            return this;
        }

        public Criteria andId_userNotEqualTo(Long value) {
            addCriterion("id_user <>", value, "id_user");
            return this;
        }

        public Criteria andId_userGreaterThan(Long value) {
            addCriterion("id_user >", value, "id_user");
            return this;
        }

        public Criteria andId_userGreaterThanOrEqualTo(Long value) {
            addCriterion("id_user >=", value, "id_user");
            return this;
        }

        public Criteria andId_userLessThan(Long value) {
            addCriterion("id_user <", value, "id_user");
            return this;
        }

        public Criteria andId_userLessThanOrEqualTo(Long value) {
            addCriterion("id_user <=", value, "id_user");
            return this;
        }

        public Criteria andId_userIn(List<Long> values) {
            addCriterion("id_user in", values, "id_user");
            return this;
        }

        public Criteria andId_userNotIn(List<Long> values) {
            addCriterion("id_user not in", values, "id_user");
            return this;
        }

        public Criteria andId_userBetween(Long value1, Long value2) {
            addCriterion("id_user between", value1, value2, "id_user");
            return this;
        }

        public Criteria andId_userNotBetween(Long value1, Long value2) {
            addCriterion("id_user not between", value1, value2, "id_user");
            return this;
        }

        public Criteria andId_travelIsNull() {
            addCriterion("id_travel is null");
            return this;
        }

        public Criteria andId_travelIsNotNull() {
            addCriterion("id_travel is not null");
            return this;
        }

        public Criteria andId_travelEqualTo(Long value) {
            addCriterion("id_travel =", value, "id_travel");
            return this;
        }

        public Criteria andId_travelNotEqualTo(Long value) {
            addCriterion("id_travel <>", value, "id_travel");
            return this;
        }

        public Criteria andId_travelGreaterThan(Long value) {
            addCriterion("id_travel >", value, "id_travel");
            return this;
        }

        public Criteria andId_travelGreaterThanOrEqualTo(Long value) {
            addCriterion("id_travel >=", value, "id_travel");
            return this;
        }

        public Criteria andId_travelLessThan(Long value) {
            addCriterion("id_travel <", value, "id_travel");
            return this;
        }

        public Criteria andId_travelLessThanOrEqualTo(Long value) {
            addCriterion("id_travel <=", value, "id_travel");
            return this;
        }

        public Criteria andId_travelIn(List<Long> values) {
            addCriterion("id_travel in", values, "id_travel");
            return this;
        }

        public Criteria andId_travelNotIn(List<Long> values) {
            addCriterion("id_travel not in", values, "id_travel");
            return this;
        }

        public Criteria andId_travelBetween(Long value1, Long value2) {
            addCriterion("id_travel between", value1, value2, "id_travel");
            return this;
        }

        public Criteria andId_travelNotBetween(Long value1, Long value2) {
            addCriterion("id_travel not between", value1, value2, "id_travel");
            return this;
        }

        public Criteria andLatitudeIsNull() {
            addCriterion("latitude is null");
            return this;
        }

        public Criteria andLatitudeIsNotNull() {
            addCriterion("latitude is not null");
            return this;
        }

        public Criteria andLatitudeEqualTo(Double value) {
            addCriterion("latitude =", value, "latitude");
            return this;
        }

        public Criteria andLatitudeNotEqualTo(Double value) {
            addCriterion("latitude <>", value, "latitude");
            return this;
        }

        public Criteria andLatitudeGreaterThan(Double value) {
            addCriterion("latitude >", value, "latitude");
            return this;
        }

        public Criteria andLatitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("latitude >=", value, "latitude");
            return this;
        }

        public Criteria andLatitudeLessThan(Double value) {
            addCriterion("latitude <", value, "latitude");
            return this;
        }

        public Criteria andLatitudeLessThanOrEqualTo(Double value) {
            addCriterion("latitude <=", value, "latitude");
            return this;
        }

        public Criteria andLatitudeIn(List<Double> values) {
            addCriterion("latitude in", values, "latitude");
            return this;
        }

        public Criteria andLatitudeNotIn(List<Double> values) {
            addCriterion("latitude not in", values, "latitude");
            return this;
        }

        public Criteria andLatitudeBetween(Double value1, Double value2) {
            addCriterion("latitude between", value1, value2, "latitude");
            return this;
        }

        public Criteria andLatitudeNotBetween(Double value1, Double value2) {
            addCriterion("latitude not between", value1, value2, "latitude");
            return this;
        }

        public Criteria andLongitudeIsNull() {
            addCriterion("longitude is null");
            return this;
        }

        public Criteria andLongitudeIsNotNull() {
            addCriterion("longitude is not null");
            return this;
        }

        public Criteria andLongitudeEqualTo(Double value) {
            addCriterion("longitude =", value, "longitude");
            return this;
        }

        public Criteria andLongitudeNotEqualTo(Double value) {
            addCriterion("longitude <>", value, "longitude");
            return this;
        }

        public Criteria andLongitudeGreaterThan(Double value) {
            addCriterion("longitude >", value, "longitude");
            return this;
        }

        public Criteria andLongitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("longitude >=", value, "longitude");
            return this;
        }

        public Criteria andLongitudeLessThan(Double value) {
            addCriterion("longitude <", value, "longitude");
            return this;
        }

        public Criteria andLongitudeLessThanOrEqualTo(Double value) {
            addCriterion("longitude <=", value, "longitude");
            return this;
        }

        public Criteria andLongitudeIn(List<Double> values) {
            addCriterion("longitude in", values, "longitude");
            return this;
        }

        public Criteria andLongitudeNotIn(List<Double> values) {
            addCriterion("longitude not in", values, "longitude");
            return this;
        }

        public Criteria andLongitudeBetween(Double value1, Double value2) {
            addCriterion("longitude between", value1, value2, "longitude");
            return this;
        }

        public Criteria andLongitudeNotBetween(Double value1, Double value2) {
            addCriterion("longitude not between", value1, value2, "longitude");
            return this;
        }

        public Criteria andCreatedIsNull() {
            addCriterion("created is null");
            return this;
        }

        public Criteria andCreatedIsNotNull() {
            addCriterion("created is not null");
            return this;
        }

        public Criteria andCreatedEqualTo(Date value) {
            addCriterion("created =", value, "created");
            return this;
        }

        public Criteria andCreatedNotEqualTo(Date value) {
            addCriterion("created <>", value, "created");
            return this;
        }

        public Criteria andCreatedGreaterThan(Date value) {
            addCriterion("created >", value, "created");
            return this;
        }

        public Criteria andCreatedGreaterThanOrEqualTo(Date value) {
            addCriterion("created >=", value, "created");
            return this;
        }

        public Criteria andCreatedLessThan(Date value) {
            addCriterion("created <", value, "created");
            return this;
        }

        public Criteria andCreatedLessThanOrEqualTo(Date value) {
            addCriterion("created <=", value, "created");
            return this;
        }

        public Criteria andCreatedIn(List<Date> values) {
            addCriterion("created in", values, "created");
            return this;
        }

        public Criteria andCreatedNotIn(List<Date> values) {
            addCriterion("created not in", values, "created");
            return this;
        }

        public Criteria andCreatedBetween(Date value1, Date value2) {
            addCriterion("created between", value1, value2, "created");
            return this;
        }

        public Criteria andCreatedNotBetween(Date value1, Date value2) {
            addCriterion("created not between", value1, value2, "created");
            return this;
        }
    }
}